"""
E. Биологический эксперимент

Ограничение времени	1 секунда
Ограничение памяти	64Mb
Ввод	стандартный ввод или input.txt
Вывод	стандартный вывод или output.txt

В биологическом институте Травиночка проводят эксперимент. 
Учёные хотят выяснить среднюю продолжительность жизни бактерии мимифиллы в зависимости от того, 
к какому поколению бактерия относится. Каждую минуту она производит две другие бактерии. 
Таким образом, популяцию мимифилл можно представить в виде бинарного дерева. 
В узлах дерева указаны числа — продолжительность жизни бактерии в часах. 
Помогите учёным узнать среднюю продолжительность жизни мимифиллы в зависимости от поколения.
Бактерия первого поколения прожила один час, бактерии второго поколения прожили по два и три часа, 
третьего — четыре, пять и шесть часов, четвертого — семь часов.

Формат ввода
В первой строке записано количество бактерий n — целое число в диапазоне от 1 до 1000.
В следующих n строках через пробел записаны 4 числа: номер бактерии, количество прожитых ей часов, номера двух её потомков. 
Если одно или оба последних числа равны -1, значит потомок был один или их не было.

Формат вывода
Нужно в одной строке вывести через пробел числа, 
каждое из которых равно средней продолжительности жизни бактерий на соответствующем уровне. 
Числа округляются до двух знаков после запятой согласно стандартным правилам округления.

Пример 1
Ввод	        Вывод 1.00 2.50 5.00 7.00
7
1 1 2 3
2 2 4 5
3 3 6 -1
4 4 7 -1
5 5 -1 -1
6 6 -1 -1
7 7 -1 -1

Пример 2
Ввод	        Вывод 1.00
1
1 1 -1 -1
"""

n = int(input())
info = {}
for _ in range(n):
    row = [int(i) for i in input().split()]
    info[row[0]] = row[1:]

means = [info[1][0]]

def get_mean(children):
    mean = 0
    for child in children:
        mean += info[child][0] / len(children)
    return mean

def get_children(parents):
    children = []
    for parent in parents:
        for child in info[parent][1:]:
            if child != -1:
                children.append(child)
    return children

def mean_gn(children=info[1][1:]):
    real_children = [child for child in children if child != -1]
    if not real_children:
        return 
    means.append(get_mean(children))
    next_children = get_children(children)
    mean_gn(next_children)


if __name__ == '__main__':
    mean_gn()
    print(' '.join([f'{x:.2f}' for x in means]))

    


    
    